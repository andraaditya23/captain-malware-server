import time
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from api.emailalert import send_email, read_yaml_file
import yaml

from threading import Timer

class MyHandler(FileSystemEventHandler):
    def __init__(self):
        self.timer = None
        super().__init__()

    def on_modified(self, event):
        if not event.is_directory:
            print("File detected-list yaml berubah")
            if self.timer is None:
                print("Mulai 2-minute timer")
                self.timer = Timer(120, self.send_alert)
                self.timer.start()

    def send_alert(self):
        print("Sending email alert.")
        email_process()
        self.timer = None

def email_process():
    existing_data = read_yaml_file('./batch/detected-list.yaml')

    # Prepare the admin_data dictionary
    admin_data = {}
    for admin_email, entries in existing_data.items():
        admin_data[admin_email] = entries

    # Send alert emails
    send_email(admin_data)
    
    with open('./batch/detected-list.yaml', 'w') as file:
        yaml.dump({}, file)
    
def watch_changes():
    print("Masuk Watch")
    event_handler = MyHandler()
    observer = Observer()
    observer.schedule(event_handler, path='./batch', recursive=False)
    observer.start()

    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()

if __name__ == '__main__':
    watch_changes()
